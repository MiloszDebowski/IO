#include <iostream>
#include <string>


class Computer {
public:
    void setCPU(const std::string& cpu) {
        cpu_ = cpu;
    }
    void setMemory(const std::string& memory) {
        memory_ = memory;
    }
    void setStorage(const std::string& storage) {
        storage_ = storage;
    }
    void setGraphicCard(const std::string& GCard) {
        GCard_ = GCard;
    }
    void display() {
        std::cout << "CPU: " << cpu_ << std::endl;
        std::cout << "Memory: " << memory_ << std::endl;
        std::cout << "Storage: " << storage_ << std::endl;
        std::cout << "Graphic Card: " << GCard_ << std::endl;
    }
private:
    std::string cpu_;
    std::string memory_;
    std::string storage_;
    std::string GCard_;
};


class ComputerBuilder {
public:
    virtual void buildCPU(const std::string& cpu) = 0;
    virtual void buildMemory(const std::string& memory) = 0;
    virtual void buildStorage(const std::string& storage) = 0;
    virtual void buildGraphicCard(const std::string& GCard) = 0;
    virtual Computer getResult() = 0;
};


class DesktopComputerBuilder : public ComputerBuilder {
public:
    DesktopComputerBuilder() {
        computer_ = Computer();
    }
    void buildCPU(const std::string& cpu) override {
        computer_.setCPU(cpu);
    }
    void buildMemory(const std::string& memory) override {
        computer_.setMemory(memory);
    }
    void buildStorage(const std::string& storage) override {
        computer_.setStorage(storage);
    }
    void buildGraphicCard(const std::string& GCard) override {
        computer_.setGraphicCard(GCard);
    }
    Computer getResult() override {
        return computer_;
    }
private:
    Computer computer_;
};


class LaptopComputerBuilder : public ComputerBuilder {
public:
    LaptopComputerBuilder() {
        computer_ = Computer();
    }
    void buildCPU(const std::string& cpu) override {
        computer_.setCPU(cpu);
    }
    void buildMemory(const std::string& memory) override {
        computer_.setMemory(memory);
    }
    void buildStorage(const std::string& storage) override {
        computer_.setStorage(storage);
    }
    void buildGraphicCard(const std::string& GCard) override {
        computer_.setGraphicCard(GCard);
    }
    Computer getResult() override {
        return computer_;
    }
private:
    Computer computer_;
};


class ComputerAssembler {
public:
    Computer assembleDesktop(ComputerBuilder& builder) {
        builder.buildCPU("INTEL Core i7-13700F");
        builder.buildMemory("KINGSTON Fury Beast 32GB 3200MHz");
        builder.buildStorage("SAMSUNG 980 1TB SSD");
        builder.buildGraphicCard("NVIDIA A16 64GB GDDR6 ");
        return builder.getResult();
    }

    Computer assembleLaptop(ComputerBuilder& builder) {
        builder.buildCPU("AMD Ryzen 9 5900HX");
        builder.buildMemory("Corsair Vengeance 64GB 3200MHz");
        builder.buildStorage("WD Black SN850 1TB NVMe SSD");
        builder.buildGraphicCard("AMD Radeon RX 6800M 12GB GDDR6");
        return builder.getResult();
    }
};

int main() {
    DesktopComputerBuilder desktopBuilder;
    LaptopComputerBuilder laptopBuilder;

    ComputerAssembler assembler;

    Computer desktop = assembler.assembleDesktop(desktopBuilder);
    Computer laptop = assembler.assembleLaptop(laptopBuilder);

    std::cout << "Desktop Computer Configuration:" << std::endl;
    desktop.display();

    std::cout << "\nLaptop Computer Configuration:" << std::endl;
    laptop.display();

    return 0;
}
